{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Loader/Loader.module.css","redux/phonebook/mockApi.js","components/ContactForm/ContactForm.js","redux/phonebook/selectors.js","redux/phonebook/actions.js","components/Filter/Filter.js","components/Loader/Loader.js","components/ContactList/ContactList.js","App.js","redux/phonebook/reducers.js","redux/store.js","index.js"],"names":["module","exports","mockApiSlice","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","build","getContacts","query","providesTags","type","createContact","mutation","newContact","url","method","body","invalidatesTags","deleteContact","contactId","useGetContactsQuery","useCreateContactMutation","useDeleteContactMutation","ContactForm","useForm","handleSubmit","register","reset","errors","formState","contacts","data","onSubmit","console","log","map","contact","name","includes","alert","className","styles","contact_form_container","contact_form_item","contact_form_label","pattern","placeholder","title","required","phone","contact_add_btn","getFilterValue","state","filter","filterValue","createAction","Filter","useSelector","dispatch","useDispatch","header","filter_container","value","onChange","e","target","Loader","loader","ContactList","filterVal","isLoading","contact_list","toLowerCase","id","contact_list_item","contact_list_button","onClick","uuidv4","App","contactsFilter","createReducer","payload","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a127c835.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_form_container\":\"ContactForm_contact_form_container__CQ8hZ\",\"contact_form_item\":\"ContactForm_contact_form_item__TCTUb\",\"contact_form_label\":\"ContactForm_contact_form_label__3DSlL\",\"contact_add_btn\":\"ContactForm_contact_add_btn__3vjhO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactList_contact_list__jWskN\",\"contact_list_item\":\"ContactList_contact_list_item__3NYm0\",\"contact_list_button\":\"ContactList_contact_list_button__3t8fG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter_container\":\"Filter_filter_container__BpE7c\",\"header\":\"Filter_header__2HsQl\",\"contacts_amount\":\"Filter_contacts_amount__3Imto\",\"contacts_amount_zero\":\"Filter_contacts_amount_zero__1K6VC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__1ZswR\",\"spin\":\"Loader_spin__Yjy6R\"};","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nexport const mockApiSlice = createApi({\n  reducerPath: \"mockApiSlice\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://6194ee5074c1bd00176c6a4b.mockapi.io/\",\n  }),\n  tagTypes: [\"Contact\"],\n  endpoints: (build) => ({\n    getContacts: build.query({\n      query: () => `contacts`,\n      providesTags: [{ type: \"Contacts\" }],\n    }),\n    createContact: build.mutation({\n      query: (newContact) => ({\n        url: \"contacts\",\n        method: \"POST\",\n        body: newContact,\n      }),\n      invalidatesTags: [{ type: \"Contacts\" }],\n    }),\n    deleteContact: build.mutation({\n      query: (contactId) => ({\n        url: `contacts/${contactId}`,\n        method: \"DELETE\",\n      }),\n      invalidatesTags: [{ type: \"Contacts\" }],\n    }),\n  }),\n});\n\nexport const {\n  useGetContactsQuery,\n  useCreateContactMutation,\n  useDeleteContactMutation,\n} = mockApiSlice;\n","import styles from \"./ContactForm.module.css\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  useGetContactsQuery,\n  useCreateContactMutation,\n} from \"../../redux/phonebook/mockApi\";\n\nfunction ContactForm() {\n  const {\n    handleSubmit,\n    register,\n    reset,\n    formState: { errors },\n  } = useForm();\n\n  const { data: contacts } = useGetContactsQuery();\n  const [createContact] = useCreateContactMutation();\n\n  const onSubmit = (newContact) => {\n    console.log(`newContact`, newContact);\n    if (contacts.map((contact) => contact.name).includes(newContact.name)) {\n      alert(`${newContact.name} is in your contacts list already`);\n    } else {\n      createContact(newContact);\n      reset();\n    }\n  };\n\n  return (\n    <>\n      <h1>PhoneBook</h1>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className={styles.contact_form_container}>\n          <div className={styles.contact_form_item}>\n            <label className={styles.contact_form_label}>Contact name:</label>\n            <input\n              type=\"text\"\n              {...register(\"name\", {\n                pattern:\n                  \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n              })}\n              name=\"name\"\n              placeholder=\"Enter contact name ...\"\n              title=\"User name must contain only letters, spaces, apostrophe, dash or the underscore character. For ex, Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan etc....\"\n              required\n            />\n            {errors.name && <p>Name is required.</p>}\n          </div>\n          <div className={styles.contact_form_item}>\n            <label className={styles.contact_form_label}>Contact number:</label>\n            <input\n              type=\"tel\"\n              name=\"phone\"\n              {...register(\"phone\", {\n                pattern:\n                  \"+?d{1,4}?[-.s]?(?d{1,3}?)?[-.s]?d{1,4}[-.s]?d{1,4}[-.s]?d{1,9}\",\n              })}\n              placeholder=\"Enter contact number ...\"\n              title=\"Phone number must contain only digits and may have spaces, dash, round brackets and start with plus(+)\"\n              required\n            />\n            {errors.phone && <p>Phone number is required.</p>}\n          </div>\n          <button type=\"submit\" className={styles.contact_add_btn}>\n            Add contact\n          </button>\n        </div>\n      </form>\n    </>\n  );\n}\n\nexport default ContactForm;\n","export const getFilterValue = (state) => state.filter;\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const filterValue = createAction(\"filter/value\");\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport styles from \"./Filter.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { filterValue } from \"../../redux/phonebook/actions\";\nimport { getFilterValue } from \"../../redux/phonebook/selectors\";\nimport { useGetContactsQuery } from \"../../redux/phonebook/mockApi\";\n\nfunction Filter() {\n  const filter = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n  const onFilterChange = (e) => dispatch(filterValue(e.target.value));\n  // const { data: totalContacts } = useGetContactsQuery();\n\n  return (\n    <>\n      <h2 className={styles.header}>Contacts</h2>\n      {/* {totalContacts.length > 0 ? (\n                <h4 className={styles.contacts_amount}>\n                    (there are {totalContacts.length} contacts in your phonebook)\n                </h4>\n            ) : (\n                <h4 className={styles.contacts_amount_zero}>\n                    (there are no contacts in your phonebook, please add some)\n                </h4>\n            )} */}\n      <div className={styles.filter_container}>\n        <h2>Find contact by name</h2>\n        <input\n          type=\"text\"\n          value={filter}\n          onChange={onFilterChange}\n          placeholder=\"Enter filter value ...\"\n        />\n      </div>\n    </>\n  );\n}\n\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onFilterChange: PropTypes.func.isRequired,\n};\n","import styles from \"./Loader.module.css\";\n\nexport default function Loader() {\n  return <div className={styles.loader}></div>;\n}\n","import { PropTypes } from \"prop-types\";\nimport styles from \"./ContactList.module.css\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useSelector } from \"react-redux\";\nimport { getFilterValue } from \"../../redux/phonebook/selectors\";\nimport Filter from \"../Filter/Filter\";\nimport Loader from \"../Loader/Loader\";\n//************************* */\nimport {\n  useGetContactsQuery,\n  useDeleteContactMutation,\n} from \"../../redux/phonebook/mockApi\";\n//************************* */\n\nfunction ContactList() {\n  const filterVal = useSelector(getFilterValue);\n\n  const { data: contacts, isLoading } = useGetContactsQuery();\n  const [deleteContact] = useDeleteContactMutation();\n\n  return (\n    <>\n      <Filter />\n      {isLoading && <Loader />}\n      {contacts && !isLoading && (\n        <ul className={styles.contact_list}>\n          {contacts\n            .filter((contact) =>\n              contact.name.toLowerCase().includes(filterVal.toLowerCase())\n            )\n            .map(({ name, phone, id }) => (\n              <li className={styles.contact_list_item} key={uuidv4()}>\n                <p>\n                  {name}: {phone}\n                </p>\n                <button\n                  className={styles.contact_list_button}\n                  type=\"button\"\n                  onClick={() => deleteContact(id)}\n                >\n                  Delete number\n                </button>\n              </li>\n            ))}\n        </ul>\n      )}\n    </>\n  );\n}\n\nexport default ContactList;\n\nContactList.propTypes = {\n  state: PropTypes.arrayOf(PropTypes.any).isRequired,\n  onListChange: PropTypes.func.isRequired,\n};\n","import \"./App.css\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\n\nexport default function App() {\n  return (\n    <>\n      <ContactForm />\n      <ContactList />\n    </>\n  );\n}\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { filterValue } from \"./actions\";\n\nexport const contactsFilter = createReducer(\"\", {\n  [filterValue]: (state, { payload }) => (state = payload),\n});\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { contactsFilter } from \"./phonebook/reducers\";\nimport { mockApiSlice } from \"./phonebook/mockApi\";\n\nexport const store = configureStore({\n  reducer: {\n    [mockApiSlice.reducerPath]: mockApiSlice.reducer,\n    filter: contactsFilter,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(mockApiSlice.middleware),\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}